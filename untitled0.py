# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AZLONlu1rQ_wN1Q-zLGa-uHOMDKzVJy1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
from datetime import datetime

# Unzip the dataset
with zipfile.ZipFile('/content/archive (1).zip', 'r') as zip_ref:
    zip_ref.extractall('/content')

# Load the CSV
df = pd.read_csv('/content/netflix_titles.csv')

# Initial data exploration
print("Dataset Shape:", df.shape)
print(df.info())
print("\nMissing values: ")
print(df.isnull().sum())

# Sample the data to see what we're working with
print("\nOriginal Data Sample: ")
print(df.head())

# Step 1: Handle missing values
df.fillna({
    'director': 'Unknown',
    'cast': 'Not Mentioned',
    'country': 'Not Specified',
    'rating': 'Not Rated'
}, inplace=True)

# Handle date_added missing values
# First strip whitespace and then convert to datetime
df['date_added'] = pd.to_datetime(df['date_added'].str.strip() if isinstance(df['date_added'], pd.Series) else df['date_added'], errors='coerce')
# For remaining NaT values, use release year's January 1st
mask = df['date_added'].isna()
df.loc[mask, 'date_added'] = pd.to_datetime(df.loc[mask, 'release_year'].astype(str) + '-01-01')

# Step 2: Fix duration column
# Split 'duration' into numeric and unit parts
df[['duration_int', 'duration_unit']] = df['duration'].str.extract(r'(\d+)\s*(\w+)', expand=True)
df['duration_int'] = pd.to_numeric(df['duration_int'], errors='coerce')

# Fill missing duration values based on type
movie_mask = (df['duration_int'].isna()) & (df['type'] == 'Movie')
tv_mask = (df['duration_int'].isna()) & (df['type'] == 'TV Show')

df.loc[movie_mask, 'duration_int'] = 90
df.loc[movie_mask, 'duration_unit'] = 'min'
df.loc[tv_mask, 'duration_int'] = 1
df.loc[tv_mask, 'duration_unit'] = 'Season'

# Fill remaining missing duration values
df['duration'] = df['duration'].fillna(df['duration_int'].astype(str) + ' ' + df['duration_unit'])

# Step 3: Standardize values
# Standardize country names
country_mapping = {
    'USA': 'United States',
    'US': 'United States',
    'U.S.': 'United States',
    'U.S.A.': 'United States',
    'UK': 'United Kingdom',
    'U.K.': 'United Kingdom'
}

for old, new in country_mapping.items():
    df['country'] = df['country'].replace(old, new)

# Step 4: Extract month and year from date_added
df['added_month'] = df['date_added'].dt.month.astype('int32')
df['added_year'] = df['date_added'].dt.year.astype('int32')

# Step 5: Create genre indicator columns - FIXED SYNTAX ERROR HERE
top_genres = ['Documentaries', 'Comedies', 'Dramas', 'Action', 'International']
for genre in top_genres:
    df[f'is_{genre.lower()}'] = df['listed_in'].str.contains(genre, case=False).astype(int)

# Step 6: Check for duplicates
duplicate_count = df.duplicated().sum()
print(f"Found {duplicate_count} exact duplicates")
if duplicate_count > 0:
    df = df.drop_duplicates(keep='first')

# Check for potential near-duplicates (same title, type, and year)
potential_duplicates = df[df.duplicated(subset=['title', 'type', 'release_year'], keep=False)]
print(f"Found {len(potential_duplicates)} potential near-duplicates")

# Step 7: Check for outliers in numerical columns
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.boxplot(df['release_year'])
plt.title('Release Year Distribution')

plt.subplot(1, 2, 2)
plt.boxplot(df['duration_int'])
plt.title('Duration Distribution')
plt.show()

# Distribution of movies by year
plt.figure(figsize=(12, 6))
sns.histplot(df['release_year'], kde=True, bins=30)
plt.title('Distribution of Release Years')
plt.xlabel('Year')
plt.ylabel('Count')
plt.show()

# Distribution by type
plt.figure(figsize=(10, 6))
df['type'].value_counts().plot(kind='bar')
plt.title('Content Type Distribution')
plt.ylabel('Count')
plt.show()

# Distribution by rating
plt.figure(figsize=(12, 6))
df['rating'].value_counts().plot(kind='bar')
plt.title('Rating Distribution')
plt.ylabel('Count')
plt.show()

# Organization of columns in a logical order
final_columns = [
    'show_id', 'type', 'title', 'director', 'cast', 'country',
    'date_added', 'added_month', 'added_year', 'release_year',
    'rating', 'duration_int', 'duration_unit', 'duration',
    'is_documentaries', 'is_comedies', 'is_dramas', 'is_action', 'is_international',
    'listed_in', 'description'
]

# Create final clean dataframe
clean_df = df[final_columns]

# Final quality check
print("\nFinal data info:")
print(clean_df.info())
print("\nMissing values after cleaning:")
print(clean_df.isnull().sum())
print("\nDescriptive statistics:")
print(clean_df.describe(include='all'))

# Sample of cleaned data
print("\nCleaned Data Sample: ")
print(clean_df.head())

# Save the cleaned dataset
clean_df.to_csv('/content/netflix_cleaned.csv', index=False)
df.to_csv('/content/cleaned_netflix_titles.csv', index=False)


print("Data cleaning completed and saved to '/content/netflix_cleaned.csv'")